/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IReservaClient {
    createReservation(query: CreateReservationCommand): Observable<number>;
    update(id: number, command: CancelationReservationCommand): Observable<number>;
    getActiveReservation(initDate: Date | undefined, finishDate: Date | undefined): Observable<ReservationDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class ReservaClient implements IReservaClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createReservation(query: CreateReservationCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Reserva";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateReservation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateReservation(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreateReservation(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    update(id: number, command: CancelationReservationCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Reserva/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    getActiveReservation(initDate: Date | undefined, finishDate: Date | undefined): Observable<ReservationDto[]> {
        let url_ = this.baseUrl + "/api/Reserva/ActiveReservation?";
        if (initDate === null)
            throw new Error("The parameter 'initDate' cannot be null.");
        else if (initDate !== undefined)
            url_ += "InitDate=" + encodeURIComponent(initDate ? "" + initDate.toJSON() : "") + "&";
        if (finishDate === null)
            throw new Error("The parameter 'finishDate' cannot be null.");
        else if (finishDate !== undefined)
            url_ += "FinishDate=" + encodeURIComponent(finishDate ? "" + finishDate.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetActiveReservation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActiveReservation(<any>response_);
                } catch (e) {
                    return <Observable<ReservationDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ReservationDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetActiveReservation(response: HttpResponseBase): Observable<ReservationDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ReservationDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReservationDto[]>(<any>null);
    }
}

export class CreateReservationDto implements ICreateReservationDto {
    habitacionId?: number;
    usuarioId?: number;
    hotelId?: number;
    fecha_entrada?: Date;
    fecha_salida?: Date;

    constructor(data?: ICreateReservationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.habitacionId = _data["habitacionId"];
            this.usuarioId = _data["usuarioId"];
            this.hotelId = _data["hotelId"];
            this.fecha_entrada = _data["fecha_entrada"] ? new Date(_data["fecha_entrada"].toString()) : <any>undefined;
            this.fecha_salida = _data["fecha_salida"] ? new Date(_data["fecha_salida"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateReservationDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReservationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["habitacionId"] = this.habitacionId;
        data["usuarioId"] = this.usuarioId;
        data["hotelId"] = this.hotelId;
        data["fecha_entrada"] = this.fecha_entrada ? this.fecha_entrada.toISOString() : <any>undefined;
        data["fecha_salida"] = this.fecha_salida ? this.fecha_salida.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICreateReservationDto {
    habitacionId?: number;
    usuarioId?: number;
    hotelId?: number;
    fecha_entrada?: Date;
    fecha_salida?: Date;
}

export class CreateReservationCommand extends CreateReservationDto implements ICreateReservationCommand {

    constructor(data?: ICreateReservationCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): CreateReservationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReservationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICreateReservationCommand extends ICreateReservationDto {
}

export class CancelationReservationCommand implements ICancelationReservationCommand {
    idReserva?: number;

    constructor(data?: ICancelationReservationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idReserva = _data["idReserva"];
        }
    }

    static fromJS(data: any): CancelationReservationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CancelationReservationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idReserva"] = this.idReserva;
        return data; 
    }
}

export interface ICancelationReservationCommand {
    idReserva?: number;
}

export class ReservationDto implements IReservationDto {
    habitacionId?: number;
    usuarioId?: number;
    hotelId?: number;
    fecha_entrada?: Date;
    fecha_salida?: Date;
    nombreHotel?: string | undefined;
    userMail?: string | undefined;

    constructor(data?: IReservationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.habitacionId = _data["habitacionId"];
            this.usuarioId = _data["usuarioId"];
            this.hotelId = _data["hotelId"];
            this.fecha_entrada = _data["fecha_entrada"] ? new Date(_data["fecha_entrada"].toString()) : <any>undefined;
            this.fecha_salida = _data["fecha_salida"] ? new Date(_data["fecha_salida"].toString()) : <any>undefined;
            this.nombreHotel = _data["nombreHotel"];
            this.userMail = _data["userMail"];
        }
    }

    static fromJS(data: any): ReservationDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReservationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["habitacionId"] = this.habitacionId;
        data["usuarioId"] = this.usuarioId;
        data["hotelId"] = this.hotelId;
        data["fecha_entrada"] = this.fecha_entrada ? this.fecha_entrada.toISOString() : <any>undefined;
        data["fecha_salida"] = this.fecha_salida ? this.fecha_salida.toISOString() : <any>undefined;
        data["nombreHotel"] = this.nombreHotel;
        data["userMail"] = this.userMail;
        return data; 
    }
}

export interface IReservationDto {
    habitacionId?: number;
    usuarioId?: number;
    hotelId?: number;
    fecha_entrada?: Date;
    fecha_salida?: Date;
    nombreHotel?: string | undefined;
    userMail?: string | undefined;
}

export class Tech.CleanArchitectureException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isTech.CleanArchitectureException = true;

    static isTech.CleanArchitectureException(obj: any): obj is Tech.CleanArchitectureException {
        return obj.isTech.CleanArchitectureException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new Tech.CleanArchitectureException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}